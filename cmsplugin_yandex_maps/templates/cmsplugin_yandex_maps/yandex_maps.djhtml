{% load sekizai_tags %}

<div class="cmsplugin-ya-maps {{ instance.classes }}">
    <div id="map-{{ instance.id }}" style="width: 100%; height: 100%;"></div>
</div>

{% addtoblock "js" %}
    <script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" type="text/javascript"></script>
    <script src="http://api-maps.yandex.ru/2.1/?lang={{ instance.lang }}" type="text/javascript"></script>
    <script>
        var jqYM = jQuery.noConflict(true);
        function ya_map_container_size_{{ instance.id }}(){
            {% if instance.sizing == "auto" %}
                jqYM('#map-{{ instance.id }}').parent().width('100%');
                var map_height = jqYM('#map-{{ instance.id }}').parent().parent().parent().height();
                jqYM('#map-{{ instance.id }}').parent().outerHeight(map_height, true);
            {% elif instance.sizing == "aspect" %}
                jqYM('#map-{{ instance.id }}').parent().width('100%');
                jqYM('#map-{{ instance.id }}').parent().height(jqYM('#map-{{ instance.id }}').parent().width()/{{ instance.width }}*{{ instance.height }});
            {% elif instance.sizing == "static" %}
                jqYM('#map-{{ instance.id }}').parent().width({{ instance.width }});
                jqYM('#map-{{ instance.id }}').parent().height({{ instance.height }});
            {% endif %}
        }
        jqYM(document).ready(function(){
            jqYM('#map-{{ instance.id }}').empty();
            ya_map_container_size_{{ instance.id }}();
            ymaps.ready(function(){
                var yaMap_{{ instance.id }} = new ymaps.Map('map-{{ instance.id }}', {
                    center: [{{ instance.center_lt|stringformat:"f" }}, {{ instance.center_lg|stringformat:"f" }}],
                    zoom: {{ instance.zoom }},
                    type: 'yandex#{{ instance.map_type }}',
                    behaviors: {{ behaviors|safe }},
                    controls: {{ controls|safe }},
                });
                
                {% if instance.auto_placement %}
                    yaMap_{{ instance.id }}.options.set('minZoom', {{ instance.min_zoom }});
                    yaMap_{{ instance.id }}.options.set('maxZoom', {{ instance.max_zoom }});
                {% endif %}

                {% if instance.route and placemarks.all|length > 1 %}
                    ymaps.route([{% for place in placemarks.all %}
                                    {% if place.place_lt and place.place_lg %}
                                        [{{ place.place_lt|stringformat:"f" }}, {{ place.place_lg|stringformat:"f" }}]
                                    {% else %}
                                        "{{ place.place }}"
                                    {% endif%},
                                {% endfor %}]).then(
                        function (route) {
                            yaMap_{{ instance.id }}.geoObjects.add(route);
                            {% if instance.auto_placement %}
                                {# It's not work on this API version #}
                                yaMap_{{ instance.id }}.setBounds(yaMap_{{ instance.id }}.geoObjects.getBounds());
                            {% endif %}
                        });
                {% else %}
                    {% if instance.clusterisation %}
                        var clusterer = new ymaps.Clusterer({preset: "{{ instance.cluster_preset }}",
                                                            {% if instance.cluster_disable_click_zoom %}
                                                                clusterDisableClickZoom: true,
                                                            {% endif %}
                        });
                    {% else %}
                        var collection = new ymaps.GeoObjectCollection();
                    {% endif%}
                    {% for place in placemarks.all %}
                        function create_placemark_{{ place.id }}(coordinates){
                            var placemark = new ymaps.Placemark(coordinates,{
                                {% if place.icon_style == 'default' %}
                                    iconContent: "{{ forloop.counter }}",
                                {% elif place.icon_style == 'stretchy' or place.icon_caption %}
                                    iconContent: "{{ place.title }}",
                                {% endif%}
                                hintContent: "{{ place.hint }}",
                                balloonContent: "{{ place.balloon }}",
                                {% if place.balloonHeader %}
                                    balloonContentHeader: "{{ place.balloonHeader|safe }}",
                                {% endif %}
                                {% if place.balloonBody %}
                                    balloonContentBody: "{{ place.balloonBody|safe }}",
                                {% endif %}
                                {% if place.balloonFooter %}
                                    balloonContentFooter: "{{ place.balloonFooter|safe }}",
                                {% endif %}
                            }, {
                                {% if place.icon_style == "image"  and place.icon_image %}
                                    {% if place.icon_caption %}
                                        iconLayout: 'default#imageWithContent',
                                    {% else %}
                                        iconLayout: 'default#image',
                                    {% endif%}
                                    iconImageHref: "{{ place.icon_image.url }}",
                                    {% if place.icon_caption %}
                                        iconContentOffset: [{{ place.icon_content_offset_horizontal }},
                                                         {{ place.icon_content_offset_vertical }}],
                                    {% endif %}
                                    iconImageSize: [{{ place.icon_width }}, {{ place.icon_height }}],
                                    iconImageOffset: [{{ place.icon_offset_horizontal }},
                                                         {{ place.icon_offset_vertical }}],
                                {% else %}
                                    preset: "{{ place.marker_preset }}",
                                {% endif %}
                            });
                            return placemark;
                        }

                        {% if place.auto_coordinates %}
                            var geocoder = ymaps.geocode("{{ place.place }}");
                            var coor = []
                            geocoder.then(function (res) {
                                {% if instance.clusterisation %}
                                    clusterer.add(create_placemark_{{ place.id }}(res.geoObjects.get(0).geometry.getCoordinates()));
                                {% else %}
                                    collection.add(create_placemark_{{ place.id }}(res.geoObjects.get(0).geometry.getCoordinates()));
                                {% endif%}
                                {% if instance.auto_placement and forloop.first and placemarks.all|length > 1 %}
                                    yaMap_{{ instance.id }}.setBounds(yaMap_{{ instance.id }}.geoObjects.getBounds(), {checkZoomRange:true, zoomMargin:50});
                                {% elif placemarks.all|length > 0 %}
                                yaMap_{{ instance.id }}.setCenter(res.geoObjects.get(0).geometry.getCoordinates());
                                {% endif %}
                            });
                        {% else %}
                            {% if instance.clusterisation %}
                                clusterer.add(create_placemark_{{ place.id }}([{{ place.place_lt|stringformat:"f" }},{{ place.place_lg|stringformat:"f" }}]));
                            {% else %}
                                collection.add(create_placemark_{{ place.id }}([{{ place.place_lt|stringformat:"f" }},{{ place.place_lg|stringformat:"f" }}]));
                            {% endif%}
                            {% if instance.auto_placement and forloop.first and placemarks.all|length > 1 %}
                                yaMap_{{ instance.id }}.setBounds(yaMap_{{ instance.id }}.geoObjects.getBounds(), {checkZoomRange:true, zoomMargin:50});
                            {% elif placemarks.all|length > 0 %}
                                yaMap_{{ instance.id }}.setCenter([{{ place.place_lt|stringformat:"f" }}, {{ place.place_lg|stringformat:"f" }}]);
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if instance.clusterisation %}
                        yaMap_{{ instance.id }}.geoObjects.add(clusterer);
                    {% else %}
                        yaMap_{{ instance.id }}.geoObjects.add(collection);
                    {% endif %}
                {% endif %}
                
                {% if instance.size_update_method == "observer" %}
                    var observer_{{ instance.id }} = new MutationObserver(function(mutations) {
                        ya_map_container_size_{{ instance.id }}();
                        yaMap_{{ instance.id }}.container.fitToViewport();
                    });
                    var config_{{ instance.id }} = { attributes: true };
                    var target_{{ instance.id }} = jqYM('#map-{{ instance.id }}').closest("{{ instance.jq_selector|safe }}")[0];
                    if(typeof target_{{ instance.id }} !== "undefined"){
                        observer_{{ instance.id }}.observe(target_{{ instance.id }}, config_{{ instance.id }});
                    }
                {% elif instance.size_update_method == "jq_event" %}
                    jqYM(document).on("{{ instance.jq_event }}", "{{ instance.jq_selector|safe }}", function(){
                        ya_map_container_size_{{ instance.id }}();
                        yaMap_{{ instance.id }}.container.fitToViewport();
                    });
                {% endif %}
            });
        });
    </script>
{% endaddtoblock %}